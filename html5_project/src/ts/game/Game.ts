import { AudioManager } from '../audio/AudioManager';
import { ResourceLoader } from '../utils/ResourceLoader';
import { GameState, GameStateType } from '../models/GameState';
import { Apple } from './Apple';
import { Hedgehog } from './Hedgehog';
import { NumberSelection } from './NumberSelection';

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –∏–≥—Ä—ã, –æ–±—ä–µ–¥–∏–Ω—è—é—â–∏–π –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
 */
export class Game {
  private container: HTMLElement;
  private audioManager: AudioManager;
  private resourceLoader: ResourceLoader;
  private gameState: GameState;
  
  // –≠–ª–µ–º–µ–Ω—Ç—ã –∏–≥—Ä—ã
  private mainMenuElement: HTMLElement | null = null;
  private gameFieldElement: HTMLElement | null = null;
  private treeContainer: HTMLElement | null = null;
  private hedgehog: Hedgehog | null = null;
  private apples: Apple[] = [];
  private numberSelection: NumberSelection | null = null;
  private soundButton: HTMLButtonElement | null = null;
  
  // –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, —á—Ç–æ –∏–≥—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
  private initialized: boolean = false;
  
  /**
   * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–ª–∞—Å—Å–∞ –∏–≥—Ä—ã
   * @param container HTML-—ç–ª–µ–º–µ–Ω—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∏–≥—Ä–∞
   * @param audioManager –ú–µ–Ω–µ–¥–∂–µ—Ä –∞—É–¥–∏–æ
   * @param resourceLoader –ó–∞–≥—Ä—É–∑—á–∏–∫ —Ä–µ—Å—É—Ä—Å–æ–≤
   */
  constructor(
    container: HTMLElement,
    audioManager: AudioManager,
    resourceLoader: ResourceLoader
  ) {
    this.container = container;
    this.audioManager = audioManager;
    this.resourceLoader = resourceLoader;
    this.gameState = new GameState();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
    this.initStateHandlers();
  }
  
  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
   */
  private initStateHandlers(): void {
    // –ü–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    this.gameState.onStateChange(GameStateType.MAIN_MENU, () => {
      this.showMainMenu();
    });
    
    // –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ñ–∞–∑—É —Å–±–æ—Ä–∞ —è–±–ª–æ–∫
    this.gameState.onStateChange(GameStateType.COLLECTING, () => {
      this.showCollectingPhase();
    });
    
    // –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ñ–∞–∑—É –≤—ã–±–æ—Ä–∞ —á–∏—Å–ª–∞
    this.gameState.onStateChange(GameStateType.SELECTING, () => {
      this.showNumberSelectionPhase();
    });
    
    // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —ç–∫—Ä–∞–Ω—É —É—Å–ø–µ—Ö–∞
    this.gameState.onStateChange(GameStateType.SUCCESS, () => {
      this.showSuccessScreen();
    });
    
    // –ü–æ–∫–∞–∑ –ø–æ–¥—Å–∫–∞–∑–∫–∏
    this.gameState.onStateChange(GameStateType.HINT, () => {
      this.showHint();
    });
    
    // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —ç–∫—Ä–∞–Ω—É –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
    this.gameState.onStateChange(GameStateType.LEVEL_UP, () => {
      this.showLevelUpScreen();
    });
  }
  
  /**
   * –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã
   */
  public start(): void {
    if (!this.initialized) {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–≤—É–∫–æ–≤
      this.audioManager.initSounds(
        this.resourceLoader.getSound('background') || 'assets/sounds/background.mp3',
        this.resourceLoader.getSound('hit') || 'assets/sounds/hit.mp3',
        this.resourceLoader.getSound('success') || 'assets/sounds/success.mp3',
        this.resourceLoader.getSound('nyam') || 'assets/sounds/nyam.mp3'
      );
      
      // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∑–≤—É–∫–∞
      this.createSoundButton();
      
      this.initialized = true;
    }
    
    // –ü–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    this.gameState.setState(GameStateType.MAIN_MENU);
  }
  
  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–≤—É–∫–æ–º
   */
  private createSoundButton(): void {
    this.soundButton = document.createElement('button');
    this.soundButton.className = 'sound-button';
    this.soundButton.textContent = this.audioManager.getMuteState() ? 'üîá' : 'üîä';
    this.soundButton.addEventListener('click', this.toggleSound.bind(this));
    this.container.appendChild(this.soundButton);
  }
  
  /**
   * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∑–≤—É–∫–∞
   */
  private toggleSound(): void {
    const isMuted = this.audioManager.toggleMute();
    if (this.soundButton) {
      this.soundButton.textContent = isMuted ? 'üîá' : 'üîä';
    }
  }
  
  /**
   * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
   */
  private showMainMenu(): void {
    // –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    this.clearGameContainer();
    
    // –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    this.mainMenuElement = document.createElement('div');
    this.mainMenuElement.id = 'main-menu';
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    const title = document.createElement('h1');
    title.className = 'game-title';
    title.textContent = '–Ø–±–ª–æ–∫–∏ –∏ —ë–∂–∏–∫';
    this.mainMenuElement.appendChild(title);
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —ë–∂–∏–∫–∞
    const hedgehogImage = document.createElement('img');
    hedgehogImage.src = 'assets/images/3d-hedgehog.svg';
    hedgehogImage.alt = '–Å–∂–∏–∫';
    hedgehogImage.className = 'hedgehog-image';
    this.mainMenuElement.appendChild(hedgehogImage);
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
    const startButton = document.createElement('button');
    startButton.className = 'start-button';
    startButton.textContent = '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É';
    startButton.addEventListener('click', () => {
      this.gameState.setState(GameStateType.COLLECTING);
    });
    this.mainMenuElement.appendChild(startButton);
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    const instruction = document.createElement('p');
    instruction.textContent = '–°–æ–±–∏—Ä–∞–π —è–±–ª–æ–∫–∏ –∏ —É—á–∏—Å—å —Å—á–∏—Ç–∞—Ç—å –≤–º–µ—Å—Ç–µ —Å —ë–∂–∏–∫–æ–º!';
    this.mainMenuElement.appendChild(instruction);
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    this.container.appendChild(this.mainMenuElement);
  }
  
  /**
   * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–∞–∑—ã —Å–±–æ—Ä–∞ —è–±–ª–æ–∫
   */
  private showCollectingPhase(): void {
    // –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    this.clearGameContainer();
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
    this.gameFieldElement = document.createElement('div');
    this.gameFieldElement.id = 'game-field';
    this.gameFieldElement.className = 'game-field';
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –¥–µ—Ä–µ–≤–∞ –∏ —è–±–ª–æ–∫
    this.treeContainer = document.createElement('div');
    this.treeContainer.className = 'tree-container';
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞
    const treeSvg = document.createElement('img');
    treeSvg.src = 'assets/images/isometric-tree.svg';
    treeSvg.alt = '–Ø–±–ª–æ—á–Ω–æ–µ –¥–µ—Ä–µ–≤–æ';
    treeSvg.className = 'tree-svg';
    this.treeContainer.appendChild(treeSvg);
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ë–∂–∏–∫–∞
    this.hedgehog = new Hedgehog(this.treeContainer);
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö —è–±–ª–æ–∫
    const applesCounter = document.createElement('div');
    applesCounter.className = 'apples-collected-counter';
    
    const appleIcon = document.createElement('img');
    appleIcon.src = 'assets/images/apple.svg';
    appleIcon.alt = '–Ø–±–ª–æ–∫–æ';
    appleIcon.className = 'apple-icon';
    applesCounter.appendChild(appleIcon);
    
    const applesCount = document.createElement('span');
    applesCount.className = 'apples-count';
    applesCount.textContent = '0';
    applesCounter.appendChild(applesCount);
    
    this.treeContainer.appendChild(applesCounter);
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —è–±–ª–æ–∫
    this.generateApples();
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–µ—Ä–µ–≤–∞ –≤ –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
    this.gameFieldElement.appendChild(this.treeContainer);
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    this.container.appendChild(this.gameFieldElement);
    
    // –û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    setTimeout(() => {
      this.audioManager.speak(this.gameState.getMessage());
    }, 500);
  }
  
  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —è–±–ª–æ–∫ –Ω–∞ –¥–µ—Ä–µ–≤–µ
   */
  private generateApples(): void {
    if (!this.treeContainer) return;
    
    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —è–±–ª–æ–∫
    this.apples = [];
    
    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è —è–±–ª–æ–∫
    const foliageCircles = [
      { cx: 250, cy: 200, r: 42 },
      { cx: 330, cy: 150, r: 50 },
      { cx: 400, cy: 130, r: 60 },
      { cx: 470, cy: 150, r: 50 },
      { cx: 550, cy: 200, r: 42 },
      { cx: 290, cy: 180, r: 45 },
      { cx: 510, cy: 180, r: 45 }
    ];
    
    // –°–æ–∑–¥–∞–Ω–∏–µ —è–±–ª–æ–∫
    const maxApples = this.gameState.getMaxApples();
    for (let i = 0; i < maxApples; i++) {
      // –í—ã–±–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫—Ä—É–≥–∞ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —è–±–ª–æ–∫–∞
      const circleIndex = Math.floor(Math.random() * foliageCircles.length);
      const circle = foliageCircles[circleIndex];
      
      // –°–ª—É—á–∞–π–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏ –∫—Ä—É–≥–∞
      const angle = Math.random() * Math.PI * 2;
      const distance = Math.random() * circle.r * 0.7;
      const x = circle.cx + Math.cos(angle) * distance;
      const y = circle.cy + Math.sin(angle) * distance;
      
      // –°–æ–∑–¥–∞–Ω–∏–µ —è–±–ª–æ–∫–∞
      const apple = new Apple(
        i,
        { x, y },
        this.treeContainer,
        this.handleAppleCollected.bind(this)
      );
      
      this.apples.push(apple);
    }
  }
  
  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è —Å–±–æ—Ä–∞ —è–±–ª–æ–∫–∞
   * @param id –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–±—Ä–∞–Ω–Ω–æ–≥–æ —è–±–ª–æ–∫–∞
   * @param x X-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ —è–±–ª–æ–∫–∞
   */
  private handleAppleCollected(id: number, x: number): void {
    // –°–±–æ—Ä —è–±–ª–æ–∫–∞ –≤ –∏–≥—Ä–æ–≤–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    this.gameState.collectApple();
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
    const applesCountElement = document.querySelector('.apples-count');
    if (applesCountElement) {
      applesCountElement.textContent = this.gameState.getApplesCollected().toString();
    }
    
    // –ó–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
    this.audioManager.playHit();
    this.audioManager.speakCount(this.gameState.getApplesCollected());
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –µ–∂–∏–∫–∞
    if (this.hedgehog) {
      this.hedgehog.moveToApple(x);
      
      setTimeout(() => {
        if (this.hedgehog) {
          this.hedgehog.showEatingAnimation();
          this.audioManager.playNyam();
        }
      }, 900);
    }
  }
  
  /**
   * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–∞–∑—ã –≤—ã–±–æ—Ä–∞ —á–∏—Å–ª–∞
   */
  private showNumberSelectionPhase(): void {
    // –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    this.clearGameContainer();
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –≤—ã–±–æ—Ä–∞ —á–∏—Å–ª–∞
    this.numberSelection = new NumberSelection(
      this.container,
      this.gameState.getApplesCollected(),
      this.handleNumberSelected.bind(this),
      this.gameState.getIncorrectAttempts()
    );
    
    // –û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞
    setTimeout(() => {
      this.audioManager.speak(this.gameState.getMessage());
    }, 500);
  }
  
  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —á–∏—Å–ª–∞
   * @param number –í—ã–±—Ä–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ
   */
  private handleNumberSelected(number: number): void {
    const isCorrect = this.gameState.checkNumber(number);
    
    if (isCorrect) {
      this.audioManager.playSuccess();
      this.audioManager.speakSuccess();
    } else {
      this.audioManager.playHit();
      this.audioManager.speakWrong();
    }
  }
  
  /**
   * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ —É—Å–ø–µ—Ö–∞
   */
  private showSuccessScreen(): void {
    // –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    this.clearGameContainer();
    
    // –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ —É—Å–ø–µ—Ö–∞
    const successScreen = document.createElement('div');
    successScreen.className = 'success-screen';
    
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫
    const title = document.createElement('h1');
    title.textContent = '–ú–æ–ª–æ–¥–µ—Ü!';
    successScreen.appendChild(title);
    
    // –¢–µ–∫—Å—Ç –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è
    const message = document.createElement('p');
    message.textContent = '–¢—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ—Å—á–∏—Ç–∞–ª, —Å–∫–æ–ª—å–∫–æ —è–±–ª–æ–∫ —Å–æ–±—Ä–∞–ª —ë–∂–∏–∫!';
    successScreen.appendChild(message);
    
    // –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö —è–±–ª–æ–∫
    const successCount = document.createElement('div');
    successCount.className = 'success-count';
    
    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–∏—Å–ª–∞
    const successNumber = document.createElement('div');
    successNumber.className = 'success-number';
    successNumber.textContent = this.gameState.getApplesCollected().toString();
    successCount.appendChild(successNumber);
    
    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —è–±–ª–æ–∫
    const successApples = document.createElement('div');
    successApples.className = 'success-apples';
    
    for (let i = 0; i < this.gameState.getApplesCollected(); i++) {
      const appleImg = document.createElement('img');
      appleImg.src = 'assets/images/apple.svg';
      appleImg.alt = '–Ø–±–ª–æ–∫–æ';
      appleImg.className = 'success-apple';
      appleImg.style.left = `${(i % 5) * 40}px`;
      appleImg.style.top = `${Math.floor(i / 5) * 40}px`;
      appleImg.style.zIndex = `${i}`;
      successApples.appendChild(appleImg);
    }
    
    successCount.appendChild(successApples);
    successScreen.appendChild(successCount);
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    this.container.appendChild(successScreen);
    
    // –û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —É—Å–ø–µ—Ö–∞
    this.audioManager.speak(this.gameState.getMessage());
  }
  
  /**
   * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏
   */
  private showHint(): void {
    if (!this.numberSelection) return;
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –≤—ã–±–æ—Ä–∞ —á–∏—Å–ª–∞
    this.numberSelection.showHint(this.gameState.getMessage(GameStateType.HINT));
    
    // –û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏
    this.audioManager.speak(this.gameState.getMessage(GameStateType.HINT));
  }
  
  /**
   * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
   */
  private showLevelUpScreen(): void {
    // –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    this.clearGameContainer();
    
    // –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
    const levelUpScreen = document.createElement('div');
    levelUpScreen.className = 'success-screen level-up-screen';
    
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫
    const title = document.createElement('h1');
    title.textContent = '–û—Ç–ª–∏—á–Ω–æ!';
    levelUpScreen.appendChild(title);
    
    // –¢–µ–∫—Å—Ç –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è
    const message = document.createElement('p');
    message.textContent = '–ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å!';
    levelUpScreen.appendChild(message);
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è
    const levelInfo = document.createElement('div');
    levelInfo.className = 'level-info';
    levelInfo.innerHTML = `
      <p>–¢–µ–ø–µ—Ä—å –±—É–¥–µ—Ç <strong>${this.gameState.getMaxApples()}</strong> —è–±–ª–æ–∫!</p>
    `;
    levelUpScreen.appendChild(levelInfo);
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    this.container.appendChild(levelUpScreen);
    
    // –û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è
    this.audioManager.speak(this.gameState.getMessage());
  }
  
  /**
   * –û—á–∏—Å—Ç–∫–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
   */
  private clearGameContainer(): void {
    // –£–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–≥—Ä—ã
    if (this.mainMenuElement && this.mainMenuElement.parentNode) {
      this.mainMenuElement.parentNode.removeChild(this.mainMenuElement);
      this.mainMenuElement = null;
    }
    
    if (this.gameFieldElement && this.gameFieldElement.parentNode) {
      this.gameFieldElement.parentNode.removeChild(this.gameFieldElement);
      this.gameFieldElement = null;
      this.treeContainer = null;
    }
    
    if (this.numberSelection) {
      this.numberSelection.cleanup();
      this.numberSelection = null;
    }
    
    // –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞, –Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∑–≤—É–∫–∞
    const soundButton = this.soundButton;
    this.container.innerHTML = '';
    
    if (soundButton) {
      this.container.appendChild(soundButton);
      this.soundButton = soundButton;
    }
  }
}